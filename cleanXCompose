#!/usr/bin/env python3

from argparse import ArgumentParser
from toXComposeTools import char2XCLine, char2XCLineWeb, hex2XCLine, name2XCLine
from functools import partial
import logging
import sys

def main(xComposeFilePath, chosenChar2XCLine):

    with open(xComposeFilePath) as XCFile:
        XCLines = XCFile.readlines()

    lineProcessor = partial(processLine, chosenChar2XCLine)
    processAndPrint = lambda line : print(lineProcessor(line))
    newXCLines = list(filter(None, map(processAndPrint, XCLines)))


def processLine(chosenChar2XCLine, line):
    """
    process lines of form
        <SOME> <KEYS> : "C" # BLAH
    returning the line linted using "C" as the key for unicode lookup.
    """
    if not line or line == "\n":
        return "\n"
    if is_comment(line) or is_include(line):
        return line.strip()

    (keys_char_uhx, _, name) = line.partition('#')
    (keys, _, char_uhx) = keys_char_uhx.partition(':')
    (_, char, uhx) = char_uhx.strip().split('"')
    char = char.strip()
    uhx = uhx.strip()
    name = name.strip()

    if uhx:
        if chosenChar2XCLine(char) != hex2XCLine(uhx):
            logging.warning("Character '" + char \
                   + "' doesn't match codepoint '" + uhx + "'")
            if name and chosenChar2XCLine(char) != name2XCLine(name):
                logging.error("Also, character '" + char \
                       + "' doesn't match name '" + name + "'")

    return chosenChar2XCLine(char, ' '.join(keys.split()))


def is_include(str):
    if "include" in str:
        return True
    else:
        return False


def is_comment(str):
    if str[0] == '#':
        return True
    else:
        return False


if __name__ == '__main__':
    logging.basicConfig(stream=sys.stderr, level=logging.INFO)
    args = ArgumentParser(
        description="Removes extraneous spaces, verifies hex codes, \
            inserts descriptions from XCompose file")

    args.add_argument('filepath', type=str, help='Path to XCompose file')
    args.add_argument('-w', '--web',
                      action='store_true',
                      help='Use Internet resources to obtain \
                unicode character data.')

    args = args.parse_args()

    if args.web:
        chosenChar2XCLine = char2XCLineWeb
    else:
        chosenChar2XCLine = char2XCLine

    main(args.filepath, chosenChar2XCLine)
