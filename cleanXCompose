#!/usr/bin/env python3

from argparse import ArgumentParser
import toXComposeTools as toXC
from functools import partial
import logging
import sys


def main(infile, outfile):

    process_line = partial(process_line_using, toXC.char2xc)

    with open(infile) as inXC:
        with open(outfile, 'w') as outXC:
            for each in (process_line(line) for line in inXC):
                outXC.write(each + '\n')


def process_line_using(usr_char2xc, line):
    """
    process lines of form
        <SOME> <KEYS> : "C" # BLAH
    returning the line linted using "C" as the key for unicode lookup.
    """
    if not line or line == "\n":
        return "\n"
    if is_comment(line) or is_include(line):
        return line.strip()

    if not line.count(':') == 1 and line.count('"') >= 2:
        logging.warning("Ignoring line with unrecognized format:\n\t" + line)
        return line.strip()

    (keys_char_uhx, _, name) = line.partition('#')
    (keys, _, char_uhx) = keys_char_uhx.partition(':')
    (_, char, uhx) = char_uhx.strip().split('"')
    char = char.strip()
    uhx = uhx.strip().upper()
    name = name.strip()

    if uhx:
        charLup = toXC.lookup_char(char)
        uhexLup = toXC.lookup_uhex(uhx)
        if charLup != uhexLup:
            if prompt_charT_uhexF(
                'Conflict in XCompose: ("' + char + '", ' + uhx + ').\n'
                    + '\t[c] Character lookup gives: '
                + '"' + charLup[0] + '", ' +
                    charLup[1] + ', ' + charLup[2] + '\n'
                    + '\t[h] Hex codepoint lookup gives: '
                + '"' + uhexLup[0] + '", ' +
                uhexLup[1] + ', ' + uhexLup[2] + '\n'
                    + 'Which is correct?'):
                (_, uhx, name) = charLup
            else:
                (char, uhx, name) = uhexLup

    return usr_char2xc(char, ' '.join(keys.split()))


def is_include(str):
    if "include" in str:
        return True
    else:
        return False


def is_comment(str):
    if str[0] == '#':
        return True
    else:
        return False


def prompt_charT_uhexF(question):
    reply = input(question + ' ([c]har/[h]ex): ').lower().strip()
    if reply in ["c", "ch", "chr", "char"]:
        return True
    elif reply in ["h", "he", "hx", "hex"]:
        return False
    else:
        return prompt_charT_uhexF("Invalid response. Please enter")


if __name__ == '__main__':
    logging.basicConfig(stream=sys.stderr, level=logging.INFO)
    args = ArgumentParser(
        description="Removes extraneous spaces, verifies hex codes, \
            inserts Unicode names from Unicode database.")

    args.add_argument('infile', type=str, help='Path to XCompose file')
    args.add_argument('outfile', type=str, help='Path to output file')

    args = args.parse_args()

    main(args.infile, args.outfile)
